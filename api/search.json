[{"id":"a110e7f54ee37399651476ce726f947e","title":"Mac下使用命令行启动Android模拟器/真机并安装应用","content":"P.S.本文默认读者已配置好Mac下的Android开发环境\n一、Mac下使用命令行启动Android模拟器（avd）\n\n\n\n\n\n\n\n\n参考文章：Android官方：从命令行启动模拟器，Stack Overflow：Android Emulator Error Message: “PANIC: Missing emulator engine program for ‘x86’ CPUS.”\n1、查看当前已经安装的模拟器命令：\nemulator -list-avds\n\n输出示例：\nxxxx ~ % emulator -list-avds\nPixel_3a_API_30_x86\n\n2、根据模拟器名称启动的两种方式方式一：\nemulator @&lt;模拟器名称&gt;\n\n方式二：\nemulator -avd &lt;模拟器名称&gt;\n\n3、如果在启动时遇到这种情况xxxx ~ % emulator @Pixel_3a_API_30_x86\nPANIC: Missing emulator engine program for &#39;x86&#39; CPU.\n\n问题缘由在百度和Google上查了下，在某个AndroidStudio版本升级后，使用的emulator命令目录修改了由/Users/xxxx/Library/Android/sdk/tools/emulator变更为/Users/xxxx/Library/Android/sdk/emulator/emulator\n可以使用which emulator来查看当前你的机器使用的是什么版本的emulator\n解决方案a.简单粗暴法将/Users/xxxx/Library/Android/sdk/emulator/下的所有文件复制替换到/Users/xxxx/Library/Android/sdk/tools/下\nb.根源解决法查看环境变量的配置，如果同时存在tools和emulator的环境变量配置，保证emulator的在前，tools的在后，如果tools在前，在使用emulator命令默认就会指向到tools目录下\n首先编辑你的.zshrc或者.bash_profile\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;emulator\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools\n\n然后Source一下，可能需要重启（我是重启后生效）\n下面贴出我的环境变量配置供参考：\n#Android\nexport ANDROID_HOME&#x3D;$HOME&#x2F;Library&#x2F;Android&#x2F;sdk\nexport ANDROID_NDK_HOME&#x3D;$&#123;HOME&#125;&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;ndk&#x2F;21.4.7075529\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;emulator\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools&#x2F;bin\nexport PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools\n\n二、Mac下使用命令行给模拟器/真机安装应用并启动1、查看当前已连接的模拟器/真机命令：\nadb devices\n\n输出示例：\nxxxx ~ % adb devices\nList of devices attached\n88XX03Z76\tdevice\nemulator-5554\tdevice\n\n2、使用adb命令安装应用命令：\n#如果当前只连接了一台设备\nadb install &lt;安卓的apk文件&gt;\n\n#如果当前连接了多台设备，先指定你要安装的设备\nadb -s 88XX03Z76 install &lt;安卓的apk文件&gt;\n\n输出示例：\nxxxx ~ % adb -s 88XX03Z76 install app.apk\nPerforming Streamed Install\nSuccess\n\n3、使用adb命令启动应用命令：\n#如果当前只连接了一台设备\nadb shell am start &lt;包名&gt;&#x2F;&lt;启动Activity的全限定类名&gt;\n\n#如果当前连接了多台设备，先指定你要安装的设备\nadb -s emulator-5554 shell am start &lt;包名&gt;&#x2F;&lt;启动Activity的全限定类名&gt;\n\n输出示例：\nxxxx ~ % adb -s emulator-5554 shell am start com.ccx.accumulation&#x2F;com.ccx.accumulation.MainActivity          \nStarting: Intent &#123; act&#x3D;android.intent.action.MAIN cat&#x3D;[android.intent.category.LAUNCHER] cmp&#x3D;com.ccx.accumulation&#x2F;.MainActivity &#125;\n\n或简写为：\nxxxx ~ % adb -s emulator-5554 shell am start com.ccx.accumulation&#x2F;.MainActivity          \nStarting: Intent &#123; act&#x3D;android.intent.action.MAIN cat&#x3D;[android.intent.category.LAUNCHER] cmp&#x3D;com.ccx.accumulation&#x2F;.MainActivity &#125;\n\n4、如何查看包名命令：\n#如果当前只连接了一台设备\nadb shell pm list packages\n\n#如果当前连接了多台设备，先指定你要安装的设备\nadb -s emulator-5554 shell pm list packages\n\n输出示例：\nxxxx ~ % adb -s emulator-5554 shell pm list packages\npackage:com.google.android.networkstack.tethering\npackage:com.android.cts.priv.ctsshim\npackage:com.google.android.youtube\npackage:com.android.internal.display.cutout.emulation.corner\npackage:com.google.android.ext.services\npackage:com.android.internal.display.cutout.emulation.double\n#package:com.ccx.accumulation\npackage:com.android.providers.telephony\npackage:com.android.dynsystem\n····\n\n像这样列出来一个个找吧👆🏻\n5、如何查看启动类的全限定类名命令：\n#如果当前只连接了一台设备\nadb shell dumpsys package &lt;包名&gt;\n\n#如果当前连接了多台设备，先指定你要安装的设备\nadb -s emulator-5554 shell dumpsys package &lt;包名&gt;\n\n输出示例：\nxxxx ~ % adb -s emulator-5554 shell dumpsys package com.ccx.accumulation\nActivity Resolver Table:\n  Non-Data Actions:\n      my_action:\n        8febbcb com.ccx.accumulation&#x2F;.activity.SecondActivity filter bafffa8\n          Action: &quot;my_action&quot;\n          Category: &quot;my_category&quot;\n          Category: &quot;android.intent.category.DEFAULT&quot;\n      android.intent.action.MAIN:\n        #dc53ac1 com.ccx.accumulation&#x2F;.MainActivity filter 7270266\n          Action: &quot;android.intent.action.MAIN&quot;\n          #Category: &quot;android.intent.category.LAUNCHER&quot;\n\nService Resolver Table:\n  Non-Data Actions:\n\n····\n\n像这样👆🏻找出Activity Resolver Table下Category为android.intent.category.LAUNCHER的那一个\n","slug":"Mac下使用命令行启动Android模拟器-真机并安装应用","date":"2021-10-14T10:47:06.000Z","categories_index":"开发","tags_index":"Android","author_index":"daybreakx"},{"id":"7344539d7de0fec7ffe6290f5e6b9c6c","title":"Centos8使用yum安装官方最新的nginx","content":"最近搞了台干净的Centos服务器，准备用来放博客和跑一点node服务，结果在用yum装nginx的时候发现版本好低，于是就想办法能够在使用yum方便的前提下，装上较新的nginx，于是就有了以下探索。\nP.S.如有问题，敬请指正\nCentos8上yum默认源找到的最新版本[ccdawn]# sudo yum list nginx\nLast metadata expiration check: 3:00:47 ago on Tue 12 Oct 2021 11:29:02 AM CST.\nAvailable Packages\nnginx.x86_64\t\t\t\t1:1.14.1-9.module_el8.0.0+184+e34fea82\t\t\t\tAppStream                                                    \n\n修改yum源以直接获取最新版本Nginx1、安装yum-utils\n\n\n\n\n\n\n\n\n这是一个与 yum 集成的实用程序集合，可以通过多种方式扩展 yum 的自带功能\nsudo yum install yum-utils\n\n2、在/etc/yum.repos.d目录下创建nginx.repo文件，并添加如下内容\n\n\n\n\n\n\n\n\nyum支持你为某个包单独设置其repo配置\n[nginx-stable]\nname&#x3D;nginx stable repo\nbaseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key\nmodule_hotfixes&#x3D;true\n\n[nginx-mainline]\nname&#x3D;nginx mainline repo\nbaseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;mainline&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;0\ngpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key\nmodule_hotfixes&#x3D;true\n\n3、如果你想使用Mainline版本，需要手动指定\n\n\n\n\n\n\n\n\nrepo配置文件默认使用最上面定义的配置部分，配置内容以’[main]’此类标识起始\nsudo yum-config-manager --enable nginx-mainline\n\n4、修改后，查询到的Nginx版本就是最新的了[ccdawn]# sudo yum list nginx\nLast metadata expiration check: 1:45:32 ago on Tue 12 Oct 2021 02:52:46 PM CST.\nInstalled Packages\nnginx.x86_64\t\t\t1:1.21.3-1.el8.ngx\t\t\t@nginx-mainline                 \n\n5、如果已经安装了旧版本，请使用更新命令sudo yum update nginx\n\n6、安装sudo yum install nginx\n\n7、安装时如果遇到提示接受GPG key，验证下fingerprint是否为一下内容，如果是就接受：573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62\n\nrepo文件中存在的属性含义在尝试去理解配置文件中各个属性的含义时，查找了很多资料，最终只找到了两篇英文文档作为参考，大佬们如果有详细的中文文档或者官方的英文文档可以在评论区贴出来~\n\n\n\n\n\n\n\n\n\n配置参考：CONFIGURING YUM AND YUM REPOSITORIES配置参考：Modularity\n#设置当前repo的名称，可以使用‘yum-config-manager --enable nginx-mainline’这种方式去启用和停用\n[nginx-stable]\n#这个名称是方便开发人员理解的名称，相当于介绍\nname&#x3D;nginx stable repo\n#repo的源地址\nbaseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;\n#是否开启GPG签名校验，1开启，0关闭\ngpgcheck&#x3D;1\n#是否启用当前reopo\nenabled&#x3D;1\n#GPG的签名秘钥\ngpgkey&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;keys&#x2F;nginx_signing.key\n#说实话我没搞懂，下面我贴出文档地址\nmodule_hotfixes&#x3D;true","slug":"Centos8使用yum安装官方最新的nginx","date":"2021-10-12T10:40:48.000Z","categories_index":"开发","tags_index":"Linux","author_index":"daybreakx"},{"id":"9b026e09476259d5f8b533233c55c9c4","title":"Markdown语法记录","content":"前言\n\n\n\n\n\n\n\n\nMarkdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。\n一、标题语法1、基础语法标题内容前加上（#）字符作为标记，有几个（#）代表几级标题\n示例：\n# 我是一级标题\n\n渲染效果：\n我是一级标题我是二级标题我是三级标题我是四级标题我是五级标题我是六级标题\n\n2、另外还可以在文本下方添加任意数量的（==）号来标识一级标题，或者（--）号来标识二级标题。\n示例：\n我是一级标题\n==========\n\n我是二级标题\n----------\n\n渲染效果：\n我是一级标题我是二级标题\n\n二、段落语法1、基础语法要创建段落，请使用空白行将一行或多行文本进行分隔。\n示例：\n我是第一段\n\n我是第二段\n\n渲染效果：\n我是第一段\n我是第二段  \n三、换行语法1、基础语法在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行（&lt;br&gt;）。\n示例：\n我是换行前一段内容  \n### 我是换行后一段标题\n\n渲染效果：我是换行前一段内容   \n我是换行后一段标题2、另外由于有些Markdown编辑识别不出来空格换行，有些可以识别，比如说VSCode 1.60.2版本不能识别，Typora可以识别，这里就可以使用万能的方法去换行：HTML的（&lt;br&gt;）标签；为了兼容性，请在行尾添加“结尾空格”或 HTML 的（&lt;br&gt;）标签来实现换行。\n示例：\n我是换行前一段内容 &lt;br>\n### 我是换行后一段标题\n\n渲染效果：我是换行前一段内容 \n我是换行后一段标题四、强调语法通过将文本设置为粗体或斜体来强调其重要性。\n1、粗体基础语法要加粗文本，请在单词或短语的前后各添加两个星号（**）或下划线（__）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（**）。\n示例：\n**我是加粗的内容**\n__我也是加粗的内容__\n这里有需要**加粗**的地方\n\n渲染效果：我是加粗的内容我也是加粗的内容这里有需要加粗的地方\n2、斜体基础语法要用斜体显示文本，请在单词或短语前后添加一个星号（*）或下划线（_）。要斜体突出单词的中间部分，请在字母前后各添加一个星号（*），中间不要带空格。\n示例：\n*我是斜体的内容*\n_我也是斜体的内容_\n这里有需要*斜体*的地方\n\n渲染效果：我是斜体的内容我也是斜体的内容这里有需要斜体的地方\n3、粗体及斜体共用基础语法要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号（***）或下划线（___）。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号（***），中间不要带空格。\n示例：\n***我是斜体的内容***\n___我也是斜体的内容___\n这里有需要***斜体***的地方\n\n渲染效果：我是斜体的内容我也是斜体的内容这里有需要斜体的地方\n五、引用语法1、单行引用要创建块引用，请在段落前添加一个（&gt;） 符号。\n示例：\n> 时间就像海绵里的水，只要愿挤，总还是有的。\n\n渲染效果：\n\n\n\n\n\n\n\n\n\n时间就像海绵里的水，只要愿挤，总还是有的。\n2、多行引用引用可以包含多个段落。为段落之间的空白行添加一个（&gt;）符号。\n示例：\n> 愈艰难，就愈要做。改革，是向来没有一帆风顺的。\n> \n> 其实先驱者本是容易变成绊脚石的。\n\n渲染效果：\n\n\n\n\n\n\n\n\n\n愈艰难，就愈要做。改革，是向来没有一帆风顺的。\n其实先驱者本是容易变成绊脚石的。\n3、嵌套引用引用可以嵌套。在要嵌套的段落前添加一个（&gt;&gt;）符号。\n示例：\n> 贪安稳就没有自由，要自由就要历些危险。只有这两条路。\n> \n>> 不在沉默中爆发，就在沉默中灭亡。\n\n渲染效果：\n\n\n\n\n\n\n\n\n\n贪安稳就没有自由，要自由就要历些危险。只有这两条路。\n\n不在沉默中爆发，就在沉默中灭亡。\n\n4、引用中使用其他标记语法引用中可以嵌套使用其他的标记语法，比如说：标题（#）、加粗（**）、斜体（__）、列表（-, *, *）\n示例：\n> ### __1、你读过余华那些书？__\n>\n> - 《黄昏里的男孩》\n> - 《第七天》\n> - 《活着》\n> - 《兄弟》\n> ### __2、读完只有有什么感想？__\n> \n> **现实**主义题材、**荒诞**、**暴力**、让人感到**压抑**、但是___《活着》___又让人看到生命的坚强。\n\n渲染效果：\n\n\n\n\n\n\n\n\n\n1、你读过余华那些书？\n《黄昏里的男孩》\n\n\n《第七天》\n\n\n《活着》\n\n\n《兄弟》\n\n2、读完只有有什么感想？现实主义题材、荒诞、暴力、让人感到压抑、但是《活着》又让人看到生命的坚强。\n六、列表语法可以将多个条目组织成有序或无序列表。\n1、有序列表语法要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点，并且空一格。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n示例：\n1. 我是列表条目一\n\t1. 我是列表条目一的子条目一\n\t1. 我是列表条目一的子条目二\n2. 我是列表条目二\n4. 我是列表条目三\n\t1. 我是列表条目三的子条目一\n\t1. 我是列表条目三的子条目二\n3. 我是列表条目四\n\n渲染效果：\n\n我是列表条目一\n我是列表条目一的子条目一\n我是列表条目一的子条目二\n\n\n我是列表条目二\n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n我是列表条目四\n\n2、无序列表语法要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。\n示例：\n- 我是列表条目一\n\t- 我是列表条目一的子条目一\n\t- 我是列表条目一的子条目二\n- 我是列表条目二\n- 我是列表条目三\n\t- 我是列表条目三的子条目一\n\t- 我是列表条目三的子条目二\n- 我是列表条目四\n\n渲染效果：\n\n我是列表条目一\n我是列表条目一的子条目一\n我是列表条目一的子条目二\n\n\n我是列表条目二\n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n我是列表条目四\n\n3、列表中嵌套其他标记语法要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\n嵌套段落示例：\n- 我是列表条目一\n\t> 我是一天嵌套在列表条目中的引用内容\n- 我是列表条目二\n- 我是列表条目三\n\t- 我是列表条目三的子条目一\n\t- 我是列表条目三的子条目二\n\n渲染效果：\n\n我是列表条目一\n\n\n\n\n\n\n\n\n我是一天嵌套在列表条目中的引用内容\n\n我是列表条目二\n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n\n嵌套代码示例：\n- 我是列表条目一\n\t\t删除```我javascript\n\t\t\tcconsole.log('hello world')\n\t\t删除```我\n- 我是列表条目二\n- 我是列表条目三\n\t- 我是列表条目三的子条目一\n\t- 我是列表条目三的子条目二\n\n渲染效果：\n\n我是列表条目一  cconsole.log('hello world')\n我是列表条目二\n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n\n嵌套图片示例：\n1. 我是列表条目一\n\t1. 我是列表条目一的子条目一\n\t1. 我是列表条目一的子条目二\n2. 我是列表条目二\n\t\t![daybreakx](https://s3.bmp.ovh/imgs/2021/09/dc3ee6fb1b9b2548.jpeg)\n4. 我是列表条目三\n\t1. 我是列表条目三的子条目一\n\t1. 我是列表条目三的子条目二\n3. 我是列表条目四\n\n渲染效果：\n\n我是列表条目一\n我是列表条目一的子条目一\n我是列表条目一的子条目二\n\n\n我是列表条目二 \n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n我是列表条目四\n\n有序无需列表嵌套示例：\n1. 我是列表条目一\n\t* 我是列表条目一的子条目一\n\t* 我是列表条目一的子条目二\n2. 我是列表条目二\n\n- 我是列表条目三\n\t1. 我是列表条目三的子条目一\n\t2. 我是列表条目三的子条目二\n- 我是列表条目四\n\n渲染效果：\n\n我是列表条目一\n我是列表条目一的子条目一\n我是列表条目一的子条目二\n\n\n我是列表条目二\n\n\n我是列表条目三\n我是列表条目三的子条目一\n我是列表条目三的子条目二\n\n\n我是列表条目四\n\n七、代码语法单行代码要将单词或短语表示为代码，请将其包裹在反引号 （`）中。如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号（``）中。\n示例：\n`我是一段code`\n我这里有一段`code`需要表示\n``我这里有一段需要`转义`的内容``\n\n渲染效果：我是一段code我这里有一段code需要表示\n代码块要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符，或者使用（```），如果想要高亮，在第一个标签后添加语言名称即可。\n示例：\n\tconsolo.log('第一种使用代码块的方式')\n\t\n删除``我`\nconsolo.log('第二种使用代码块的方式')\n删除``我`\n\n删除``我`javascript\nconsolo.log('第二种使用代码块的方式-并且我可以高亮')\n删除``我`\n\nconsolo.log(&#39;第一种使用代码块的方式&#39;)\n\nconsolo.log(&#39;第二种使用代码块的方式&#39;)\n\nconsolo.log('第二种使用代码块的方式-并且我可以高亮')\n\n八、分割线语法基础语法要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。\n示例：\n***\n---\n___\n\n渲染效果：\n\n\n\n九、链接语法1、基础语法链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。\n示例：\n我是一个不带Title链接[daybreakx的博客](https:&#x2F;&#x2F;ccdawn.github.io)\n\n我是一个带Title链接[daybreakx的博客](https:&#x2F;&#x2F;ccdawn.github.io &quot;最好的博客（bushi）&quot;)\n\n渲染效果：我是一个不带Title链接daybreakx的博客\n我是一个带Title链接daybreakx的博客\n2、网址和Email地址语法使用尖括号可以很方便地把URL或者email地址变成可点击的链接。\n示例：\n&lt;https:&#x2F;&#x2F;ccdawn.github.io&gt;\n&lt;ccx0228@outlook.com&gt;\n\n渲染效果：https://ccdawn.github.io&#99;&#x63;&#120;&#48;&#50;&#x32;&#56;&#x40;&#x6f;&#x75;&#116;&#108;&#x6f;&#111;&#107;&#46;&#x63;&#111;&#x6d;\n3、带格式化的链接强调链接，在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。\n示例：\n这里是 **[daybreakx的博客](https:&#x2F;&#x2F;ccdawn.github.io)**.\n这里还是 *[daybreakx的博客](https:&#x2F;&#x2F;ccdawn.github.io)*.\n这里可以看到代码 [&#96;code&#96;](https:&#x2F;&#x2F;ccdawn.github.io&#x2F;post&#x2F;Flutter%E4%B8%AD%E5%AE%9E%E7%8E%B0Toast%E6%95%88%E6%9E%9C-%E9%9D%9EFlutterToast).\n\n渲染效果：这里是 daybreakx的博客.这里还是 daybreakx的博客.这里可以看到代码 code.\n4、引用类型链接语法引用类型链接分成两部分，定义和使用，定义是指声明一个链接（包括key和value），使用是指在文中任意位置用你生命过的key去展示。\nkey不区分大小写，可以包含字母，数字，空格或标点符号\n示例：\n使用：\n\n[我是daybreakx博客的地址][daybreakx]\n\n[我是daybreakx另一个博客的地址][jycm]\n\n声明（会隐藏喔）：\n\n[daybreakx]: https://ccdawn.github.io \"daybreakx\"\n[jycm]: https://wyrccx99.cn \"jycm\"\n\n渲染效果：\n使用：\n我是daybreakx博客的地址\n我是daybreakx另一个博客的地址\n声明（会隐藏喔）：\n十、图片语法1、基础语法示例：\n不带链接：\n![我是谁？](./Markdown语法记录/who-am-i.jpg \"我是谁？\")\n\n带链接：\n[![我是谁？](./Markdown语法记录/who-am-i.jpg \"我是谁？\")](https://ccdawn.github.io)\n\n渲染效果：不带链接：\n带链接：\n","slug":"Markdown语法记录","date":"2021-09-28T06:30:40.000Z","categories_index":"开发","tags_index":"Markdown","author_index":"daybreakx"},{"id":"e6ed385739a7b6e411921aca285a3298","title":"Windows平台下Android开发简要介绍","content":"\n\n\n\n\n\n\n\n\n本文主要介绍android在Windows下平台开发环境的搭建和遇坑总结部分内容来自网络，如有侵权联系删除。\n一、官方文档官方文档有一个大体上的引导作用，很多时候还是需要自己去摸索。开发环境搭建-官方文档\n\n\n二、准备工作1.JDK JDK版本必须是1.8，安装完jdk记得配置java环境变量JDK1.8下载地址 \n2.AndroidStudio AndroidStudio下载-中文社区   \n AndroidStudio的下载安装配置不多说了，过程曲折艰难，这里给个链接参考\n 安装过程确保选中了以下几项： Android SDK   \nAndroid SDK Platform   \nPerformance (Intel ® HAXM)   \nAndroid Virtual Device\n三、安装过程详解1.安装过程图解安装盘符建议D盘，目录建议按照图中方式命名，as安装在AndroidStudio目录下，后面还会在Android目录下新建SDK目录放置SDK：    \n   \n    \n进入自定义安装选项：  \n  \n       \n设置安卓虚拟机内存：    \n这个地方需要下载相关组件如sdk，虚拟机文件：  \n   \n2.初次新建工程会需要的问题在初次新建工程后需要加载gradle编译工具，buildtool以及其他各种小的依赖包。\n如果遇到gradle加载过慢的情况：     \n通过上图中的地址下载加载过慢的gradle的版本压缩包。\nGradle的放置路径在C:\\Users\\neon\\.gradle\\wrapper\\dists，这里的neon是我电脑的用户名，找路径的使用进入自己电脑用户名的路径即可。进入后会看到当前正在加载的gradle版本的文件夹    \n删除下图所致文件夹中的所有内容并将已经下好的gradle压缩包放置其中，文件夹的名称是as在加载gradle的时候自动生成的，之后重启as，等待gradle加载完成。    \ngradle加载完成后    \n   \n四、新建工程1.创建新工程：   \n2.自定义工程名：   \n3.选择工程类型：选择移动app，选择api版本，这里选择在安装过程中就已经下好的api，当前时间默认是9.0即api28，如果选择其他没有下载api版本，选择后会自动下载   \n4.选择模板：选择是否创建activity并选择布局模板，这里看需求选择，先选择空；\n5.文件命名：自定义空模板中自动创建的Activity的名称和对应布局的名称；   \n6.新建工程完毕：编译通过后连接手机或者创建虚拟机尝试运行。\n五、学习和参考文档Android基础入门教程Android中文社区Android官网","slug":"Windows平台下Android开发简要介绍","date":"2018-12-20T01:48:52.000Z","categories_index":"开发","tags_index":"Android","author_index":"daybreakx"},{"id":"cee112b08e6bf07c6a8b23085ed4d84b","title":"Flutter中实现Toast效果(非FlutterToast)","content":"\n\n\n\n\n\n\n\n\n本文主要介绍Flutter中利用Overlay相关内容实现Toast效果，主要实现逻辑参考简书：平静的阿卿达的文章：使用Flutter实现Toast效果以及FlutterToast的部分写法。\n\n\n1.实现原理 Overlay首先是一个可以浮在整个UI框架上的StatefulWidget，所以其需要借助于OverlayState来更新其状态，利用Overlay.of(context)方 法实例化OverlayState后过OverlayEntry构建在Overlay中的需要展示的 view，并通过OverlayState的insert方法将构建的view更新到Overlay中，同时展示在屏幕上，在不需要的时候可以通过OverlayEntry的remove方法移除当前的展示的view。\nOverlayState的使用示例：&#x2F;&#x2F;获取OverlayState\nOverlayState overlayState &#x3D; Overlay.of(context);\n&#x2F;&#x2F;创建OverlayEntry\nOverlayEntry _overlayEntry &#x3D; OverlayEntry(\n    builder: (BuildContext context) &#x3D;&gt; Positioned(\n          child: Icon(Icons.check_circle),\n        ));\n&#x2F;&#x2F;显示到屏幕上。\noverlayState.insert(_overlayEntry);\n\n2.实现效果下图为gif动态图，加载比较慢\n\n3.封装完成的MyToast代码如下import &#39;package:flutter&#x2F;material.dart&#39;;\nimport &#39;package:flutter&#x2F;widgets.dart&#39;;\n\n\nenum myToastLength &#123; LENGTH_SHORT, LENGTH_LONG &#125;\nenum myToastGravity &#123; TOP, BOTTOM, CENTER &#125;\n\nclass MyToast &#123;\n  String _msg;\n  OverlayEntry _overlayEntry; &#x2F;&#x2F;toast靠它加到屏幕上\n  bool _showing &#x3D; false; &#x2F;&#x2F;toast是否正在showing\n  DateTime _startedTime; &#x2F;&#x2F;开启一个新toast的当前时间，用于对比是否已经展示了足够时间\n  int _length; &#x2F;&#x2F;控制toast显示时间\n  double _position; &#x2F;&#x2F;控制显示位置\n  BuildContext _context;\n  Color _backgroundColor;\n  Color _textColor;\n\n  MyToast(this._context, this._backgroundColor,this._textColor);\n\n  void showToast(&#123;\n    @required String msg,\n    myToastLength toastLength,\n    myToastGravity gravity,\n    &#x2F;&#x2F;int timeInSecForIos &#x3D; 1,\n\n  &#125;) async &#123;\n    assert(msg !&#x3D; null);\n    _msg &#x3D; msg;\n    _startedTime &#x3D; DateTime.now();\n    if(toastLength !&#x3D; null)&#123;\n      toastLength &#x3D;&#x3D; myToastLength.LENGTH_SHORT ? _length &#x3D; 1000 : _length &#x3D; 2000;\n    &#125;else&#123;\n      _length &#x3D; 1000;\n    &#125;\n\n    if(gravity &#x3D;&#x3D; null || gravity &#x3D;&#x3D; myToastGravity.CENTER)&#123;\n      _position &#x3D; 1 &#x2F; 2;\n    &#125;else&#123;\n      gravity &#x3D;&#x3D; myToastGravity.TOP ? _position &#x3D; 1 &#x2F; 10 : _position &#x3D; 9 &#x2F; 10;\n    &#125;\n    &#x2F;&#x2F;获取OverlayState\n    OverlayState overlayState &#x3D; Overlay.of(_context);\n    double _height &#x3D; MediaQuery.of(_context).size.height;\n    print(&#39;当前屏幕高度&#x3D;&#x3D;&gt;&#39;+_height.toString());\n    print(&#39;toast所在高度&#x3D;&#x3D;&gt;&#39;+(_height * _position).toString());\n    _showing &#x3D; true;\n    if (_overlayEntry &#x3D;&#x3D; null) &#123;\n      _overlayEntry &#x3D; OverlayEntry(\n          builder: (BuildContext context) &#x3D;&gt;\n              Positioned(\n                &#x2F;&#x2F;top值，可以改变这个值来改变toast在屏幕中的位置\n                top: _height * _position,\n                child: Container(\n                    alignment: Alignment.center,\n                    width: MediaQuery.of(context).size.width,\n                    child: Padding(\n                      padding: EdgeInsets.symmetric(horizontal: 80.0),\n                      child: AnimatedOpacity(\n                        opacity: _showing ? 1.0 : 0.0, &#x2F;&#x2F;目标透明度\n                        duration: _showing ? Duration(milliseconds: 100) : Duration(milliseconds: 400),\n                        child: _buildToastWidget(_backgroundColor, _textColor),\n                      ),\n                    )),\n              ));\n      overlayState.insert(_overlayEntry);\n    &#125; else &#123;\n      &#x2F;&#x2F;重新绘制UI，类似setState\n      _overlayEntry.markNeedsBuild();\n    &#125;\n    await Future.delayed(Duration(milliseconds: _length)); &#x2F;&#x2F;等待两秒\n\n    &#x2F;&#x2F;2秒后消失\n    if (DateTime.now().difference(_startedTime).inMilliseconds &gt;&#x3D; _length) &#123;\n      _showing &#x3D; false;\n      _overlayEntry.markNeedsBuild();\n    &#125;\n\n    &#x2F;&#x2F;_overlayEntry.remove();\n  &#125;\n\n  &#x2F;&#x2F;toast绘制\n  _buildToastWidget(Color backgroundColor, Color textColor) &#123;\n    return Center(\n      child: Card(\n        color: backgroundColor,\n        child: Padding(\n          padding: EdgeInsets.symmetric(horizontal: 10.0, vertical: 5.0),\n          child: Text(\n            _msg,\n            style: TextStyle(\n              fontSize: 16.0,\n              color: textColor,\n            ),\n          ),\n        ),\n      ),\n    );\n  &#125;\n\n&#125;\n4.使用示例没使用静态方法的形式，因为可能存在需要在同一界面下一个toast弹出在TOP，一个toast弹出在CENTER，这时候需要实例化两个toast，设置不同的gravity属性。两个Color属性其实可以固定，主要控制Context以及时间和位置\nvoid _showToast(String msg) &#123;\n    MyToast myToast &#x3D; new MyToast(context,Colors.lightBlueAccent,Colors.white);\n    myToast.showToast(\n        msg: msg,\n        toastLength: myToastLength.LENGTH_SHORT,\n        gravity: myToastGravity.CENTER\n    );\n  &#125;\n\n\n5.总结由于个人不太喜欢FlutterToast的效果，也没认真研究，就在网上参考了文初提到的那位作者算是另辟蹊径地实现方式，使用起来个人觉得很舒服，就结合了FlutterToast的使用写法封装了一个MyToast，如有更好的实现方案或者文中代码有问题欢迎在评论区分享和指正。\n","slug":"Flutter中实现Toast效果-非FlutterToast","date":"2018-12-19T07:29:04.000Z","categories_index":"开发","tags_index":"Flutter","author_index":"daybreakx"},{"id":"2f3cf848c9e9f9021dee88c5d9ec4d79","title":"我在西塘等你","content":"\n2015年4月24日，XX，合肥。\n2015年4月25日，合肥。\n2015年4月26日，苏州。\n2015年4月27日，嘉善，西塘。\n2015年4月28日，嘉善，苏州。\n2015年4月29日，XX。\n2015年5月03日，XX。\n如梦一般的2015年，原来已经很远很远。\n\n\n  \n\n","slug":"waiting-for-you","date":"2018-11-24T13:27:15.000Z","categories_index":"生活","tags_index":"西塘","author_index":"daybreakx"},{"id":"2f32a66c6f19aef3fb66823770ac01a3","title":"React-Native的入坑之路","content":"\n\n\n\n\n\n\n\n\n本文主要介绍react-native在Windows下android平台开发环境的搭建和遇坑总结\n一、官方文档官方文档有一个大体上的引导作用，很多时候还是需要自己去摸索好填平遇到的坑，然后从这个坑跳到另一个坑。开发环境搭建-官方文档\n\n\n二、准备工作1.Node.js Node.js，版本必须高于8.3，安装完node后建议更改镜像为淘宝镜像，操作如下： 1.1.找到你nodejs的安装路径\n 1.2.进入目录node_modules\\npm找到npmc这个文件并在其最后一行添加如下内容： registry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org   \n 1.3.我这里建议使用git来输入命令行操作，这里贴出git下载地址   \n Node.js10.11.0下载地址  \n2.Python Python版本必须是2.x（不支持3.x） Python2.7.15下载地址\n3.JDK JDK版本必须是1.8，安装完jdk记得配置java环境变量（不支持1.9及更高版本）JDK1.8下载地址 \n4.AndroidStudio AndroidStudio的下载安装配置不多说了，过程曲折艰难，这里给个链接参考\n 4.1.安装过程确保选中了以下几项： Android SDK   \nAndroid SDK Platform   \nPerformance (Intel ® HAXM)   \nAndroid Virtual Device\n使用Android Studio开发Android APP\n 4.2.SDK版本保证为Android 8.0(oreo),SDK Tools版本保证为26.0.3，模拟器的image选择Oreo\n 4.3.配置 ANDROIDHOME环境变量，系统中添加一个环境变量命名为 ANDROID_HOME，指向你AndroidSDK的路径\n三、创建和运行一个新工程1.安装react-native 打开gitbash，输入如下指令： npm install -g yarn react-native-cli   \n2.在你想要的路径下init工程 react-native init AwesomeProject  \n init完毕后，你可以使用AndroidStudio打开新创建RN工程目录下的Android工程，编译运行或者进行接下来的操作\n3.编译运行前  先查看有没有开启AndroidStudio中的   模拟器，或者电脑连接（使用usb数据线或者无线调试）真机设备（需要开启usb调试），如果使用AndroidStudio中的模拟器或者则不需要如下操作： 在gitbash中输入adb devices如果出现有如下返回值： $ adb devices   \nList of devices attached   \n********      device说明当前有设备连接，如果不是说明当前没有设备连接   \n4.连接成功后执行命令 react-native run-android   \n 如果设备上出现如下图内容，那么恭喜你入坑成功  \n4.1.如果出现红字诸如： bundling failed: Error: Unable to resolve module &#x2F;..&#x2F;react-transform-hmr&#x2F;lib&#x2F;index.js \n 你可能会需要如下操作：   \n4.1.1开启两个gitbash都进入当前工程（AwesomeProject）目录下4.1.2其中一个gitbash窗口执行 react-native start --reset-cache   \n 另一个gitbash窗口执行 react-native run-android\n4.1.3如果出现RN服务启动失败的情况，请访问此页：  故障排除四、编译和运行从github上clone或者下载的工程\n\n\n\n\n\n\n\n\n这里以github上的react-native-nba-app作为例子项目链接：react-native-nba-app\n1.下载工程 直接下载或者使用gitbash执行命令： git clone https:&#x2F;&#x2F;github.com&#x2F;wwayne&#x2F;react-native-nba-app.git  clone到本地   \n2.下载node_modoules文件 进入下载后解压的工程目录下执行命令： npm install 然后执行 react-native start  如果遇到如下问题：   \n\n\n\n\n\n\n\n\n\nERROR  Watcher took too long to load      \n 修改FileWatcher的MAX_WAIT_TIME 时间 路径： node_modules—&gt;react-native—&gt;packager—&gt;react-packager—&gt;src—&gt;node-haste—&gt;FileWatcher—&gt;index.js 文件里的MAX_WAIT_TIME = 250000;\n3.完成后  可以直接打AndroidStudio中打开RN工程目录下的Android工程，编译运行  使用AS编译运行后，摇晃手机打开Dev Settings，在Debug server host &amp; port for device中设置电脑ip和react-native服务端口，服务默认使用端口为8081，电脑ip地址通过命令行ipconfig查看   \n  或者直接在RN工程目录下执行  react-native run-android\n","slug":"React-Native的入坑之路","date":"2018-10-12T03:33:25.000Z","categories_index":"开发","tags_index":"ReactNative","author_index":"daybreakx"}]